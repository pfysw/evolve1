State 0:
          program ::= * expr TK_SEM
          expr ::= * expr TK_IMPL expr
          expr ::= * TK_LPAREN expr TK_RPAREN
          expr ::= * TK_NEG expr
          expr ::= * TK_SYM

                        TK_NEG shift        1      
                     TK_LPAREN shift        2      
                        TK_SYM shift-reduce 4      expr ::= TK_SYM
                       program accept
                          expr shift        5      

State 1:
          expr ::= * expr TK_IMPL expr
          expr ::= * TK_LPAREN expr TK_RPAREN
          expr ::= * TK_NEG expr
          expr ::= TK_NEG * expr
          expr ::= * TK_SYM

                        TK_NEG shift        1      
                     TK_LPAREN shift        2      
                        TK_SYM shift-reduce 4      expr ::= TK_SYM
                          expr shift-reduce 3      expr ::= TK_NEG expr

State 2:
          expr ::= * expr TK_IMPL expr
          expr ::= * TK_LPAREN expr TK_RPAREN
          expr ::= TK_LPAREN * expr TK_RPAREN
          expr ::= * TK_NEG expr
          expr ::= * TK_SYM

                        TK_NEG shift        1      
                     TK_LPAREN shift        2      
                        TK_SYM shift-reduce 4      expr ::= TK_SYM
                          expr shift        4      

State 3:
          expr ::= * expr TK_IMPL expr
          expr ::= expr TK_IMPL * expr
          expr ::= * TK_LPAREN expr TK_RPAREN
          expr ::= * TK_NEG expr
          expr ::= * TK_SYM

                        TK_NEG shift        1      
                     TK_LPAREN shift        2      
                        TK_SYM shift-reduce 4      expr ::= TK_SYM
                          expr shift-reduce 1      expr ::= expr TK_IMPL expr

State 4:
          expr ::= expr * TK_IMPL expr
          expr ::= TK_LPAREN expr * TK_RPAREN

                       TK_IMPL shift        3      
                     TK_RPAREN shift-reduce 2      expr ::= TK_LPAREN expr TK_RPAREN

State 5:
          program ::= expr * TK_SEM
          expr ::= expr * TK_IMPL expr

                       TK_IMPL shift        3      
                        TK_SEM shift        6      

State 6:
      (0) program ::= expr TK_SEM *

                             $ reduce       0      program ::= expr TK_SEM

----------------------------------------------------
Symbols:
The first-set of non-terminals is shown after the name.

    0: $:
    1: TK_IMPL (precedence=1)
    2: TK_NEG (precedence=2)
    3: TK_SEM
    4: TK_LPAREN
    5: TK_RPAREN
    6: TK_SYM
    7: program: TK_NEG TK_LPAREN TK_SYM
    8: expr: TK_NEG TK_LPAREN TK_SYM
----------------------------------------------------
Syntax-only Symbols:
The following symbols never carry semantic content.

$ program
----------------------------------------------------
Rules:
   0: program ::= expr TK_SEM.
   1: expr ::= expr TK_IMPL expr. [TK_IMPL precedence=1]
   2: expr ::= TK_LPAREN expr TK_RPAREN.
   3: expr ::= TK_NEG expr. [TK_NEG precedence=2]
   4: expr ::= TK_SYM.
